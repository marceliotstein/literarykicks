<?php

function lktaxonomy_block_view($delta = '') {
  global $user;
  global $base_url;
  $filebase = $base_url . "/sites/default/files";
  $block['subject'] = "";
  $blockcontent = "";
  if (user_access('access content')) {
    $sourcepath = request_path();
    switch ($delta) {
      case 'lktaxonomyside':  

      // use cached data if available
      $cid = "taxside:" . $sourcepath;
      if ($cached = cache_get($cid,'cache')) {
        $blockcontent = $cached->data;
        $block['content'] = $blockcontent;
        return $block;
      }

      $sourcenid = get_nid_from_alias($sourcepath);
      $result = lktaxonomy_related_stories($sourcenid);
      $items = array();

      $rownum = 0;
      foreach ($result as $nodedata){
        $rownum++;
        $nid = $nodedata->nid;
        $thisnode = node_load($nid);
        $vid = $nodedata->vid;
        $date = format_date($nodedata->created);

        $title = l($nodedata->title, 'node/' . $nid);

        $nodepath = "/" . drupal_get_path_alias('node/' . $nid);
        $result = db_query("select body_summary from field_revision_body where entity_id = " . $nid . " and revision_id = " . $vid);
        foreach ($result as $row) {
          $fullbody = $row->body_summary;
          $bodysplit = explode("<!--break-->",$fullbody);
          $body = $bodysplit[0];
        }
        $author = $thisnode->name;
        $num_comments = $thisnode->comment_count;
        $tax_topic = "tax";

        $dek = "";
        if (!empty($thisnode->field_dek)) {
          $dek = $thisnode->field_dek['und'][0]['value'];
        }

        $story_image = "";
        if (!empty($thisnode->field_story_image)) {
          $story_image = "<img src=\"" . $filebase . "/". $thisnode->field_story_image['und'][0]['filename'] .
          "\" alt=\"" . $thisnode->field_story_image['und'][0]['alt'] . "\" />";
        }

        $comment_string = "";
        if ($num_comments=="1") {
          $comment_string = "(1 comment)";
        } else if ($num_comments!="0") {
          $comment_string = "(" . $num_comments . " comments)";
        }

        $blockcontent .= "<div class=\"lkselect-row lkselect-row-" . $rownum . "\">";
        $blockcontent .= "<article>";
        $blockcontent .= "<h2 class=\"node-title\">" . $title . "</h2>";
        $blockcontent .= "<div class=\"side-by-line\">by " . $author . " " . $date . "</div>";
        //$blockcontent .= "<div class=\"side-tax-line\">" . $tax_topic . "</div>";

        $blockcontent .= "<div class=\"storyimage\">" . $story_image . "</div>";
        $blockcontent .= "<div class=\"dek\">" . $dek . "</div><br />";
        //$blockcontent .= "<div class=\"body\">" . $body . "</div><br />";

        $blockcontent .= "<div class=\"readmorethoughts\"><a href=\"" . $nodepath . "\">... Read more and add your thoughts " . $comment_string . "</a></div>";
        $blockcontent .= "</article>";
        $blockcontent .= "</div>";

      }
      if ($user->uid==0) {
        $expire = time() + (60 * 360); // cache for six hours
        cache_set($cid, $blockcontent, 'cache', $expire);
      }
      break;
      case 'lktaxonomybottom':
      $block['subject'] = "";
      $blockcontent = "";

      // use cached data if available
      $cid = "taxbottom:" . $sourcepath;
      if ($cached = cache_get($cid,'cache')) {
        $blockcontent = $cached->data;
        $block['content'] = $blockcontent;
        return $block;
      }

      $sourcenid = get_nid_from_alias($sourcepath);
      $result = lktaxonomy_related_stories($sourcenid);
      $items = array();

      $rownum = 0;
      foreach ($result as $nodedata) {
        $rownum++;
        $nid = $nodedata->nid;
        $thisnode = node_load($nid);
        $vid = $nodedata->vid;
        $date = format_date($nodedata->created);

        $title = l($nodedata->title, 'node/' . $nid);

        $nodepath = "/" . drupal_get_path_alias('node/' . $nid);
        $result = db_query("select body_summary from field_revision_body where entity_id = " . $nid . " and revision_id = " . $vid);
        foreach ($result as $row) {
          $fullbody = $row->body_summary;
          $bodysplit = explode("<!--break-->",$fullbody);
          $body = $bodysplit[0];
        }
        $author = $thisnode->name;
        $num_comments = $thisnode->comment_count;
        $tax_topic = "tax";

        $dek = "";
        if (!empty($thisnode->field_dek)) {
          $dek = $thisnode->field_dek['und'][0]['value'];
        }

        $story_image = "";
        if (!empty($thisnode->field_story_image)) {
          $story_image = "<img class=\"img-responsive\" src=\"" . $filebase . "/". $thisnode->field_story_image['und'][0]['filename'] .
          "\" alt=\"" . $thisnode->field_story_image['und'][0]['alt'] . "\" />";
        }

        $comment_string = "";
        if ($num_comments=="1") {
          $comment_string = "(1 comment)";
        } else if ($num_comments!="0") {
          $comment_string = "(" . $num_comments . " comments)";
        }

        $blockcontent .= "<div class=\"lkselect-row lkselect-row-" . $rownum . "\">";
        $blockcontent .= "<article>";
        $blockcontent .= "<h2 class=\"lkbottomfeature-title\">" . $title . "</h2>";

        $blockcontent .= "<table class=\"lkbottomfeature-table\"><tr>";
        $blockcontent .= "<td class=\"lkbottomfeature-td-img\">";
        $blockcontent .= "<div class=\"storyimage\">" . $story_image . "</div>";
        $blockcontent .= "</td>";
        $blockcontent .= "<td class=\"lkbottomfeature-td-words\">";
        $blockcontent .= "<div class=\"side-by-line\">by " . $author . " " . $date . "</div>";
        $blockcontent .= "<div class=\"dek\">" . $dek . "</div><br />";
        $blockcontent .= "</td>";
        $blockcontent .= "</tr></table>";

        $blockcontent .= "<div class=\"readmorethoughts\"><a href=\"" . $nodepath . "\">... Read more and add your thoughts " . $comment_string . "</a></div>";

        $blockcontent .= "</article>";
        $blockcontent .= "</div>";
        // write data to cache

        if ($user->uid==0) {
          $expire = time() + (60 * 360); // cache for six hours
          cache_set($cid, $blockcontent, 'cache', $expire);
        }
      }
    }
  }

  $block['content'] = $blockcontent;

  return $block;
}

// simple retrieve that gets most popular nodes, randomized and offset

function lktaxonomy_all_select() {
  $today = gketdate();
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 12), $today['year']);
  $end_time = time();

  $offset = 8;
  $query = "select n.nid, n.vid, n.title, n.created
            from node_counter nc, node n, field_revision_body frb
            where nc.nid = n.nid
            and n.nid = frb.entity_id
            and n.vid = frb.revision_id
            and frb.body_summary is not null
            and n.type = 'story'
            and n.status = 1
            order by nc.totalcount desc limit 10 offset " . $offset;
  $result = db_query($query);
  return $result;
}

// retrieve related nids based on all taxonomy terms in topic (tid 1) vocabulary

function lktaxonomy_related_stories($sourcenid) {
  if ($sourcenid > 0) {
     $query = "select n.nid, n.vid, n.title, n.created, count(ti.tid) from taxonomy_index ti, node n
               where ti.nid = n.nid
               and n.nid <> " . $sourcenid . "
               and n.status = 1
               and ti.tid in (select ti.tid from taxonomy_index ti, taxonomy_term_data ttd
                              where ti.tid = ttd.tid
                              and ttd.vid = 1
                              and ti.nid = " . $sourcenid . ")
               and ti.nid in (select entity_id from field_revision_field_dek)
               and ti.nid in (select entity_id from field_revision_field_story_image)
               group by n.nid, n.vid, n.title, n.created
               having count(ti.tid) > 0
               order by count(ti.tid) desc, n.created asc
               limit 15";
     //print "<!--" . $query . "-->";
     $result = db_query($query);
  } else {
     $result = lktaxonomy_all_nid();
  }
  $num_nodes = $result->rowCount();
  print "<!-- taxonomy related stories count = " . $num_nodes . "-->";

  // if no taxonomy related stories found, we're probably looking at an fbitem node which
  // has no taxonomy. in this case, show most popular recent blog posts.
  if ($num_nodes<1) {
    $result = lktaxonomy_all_latest_popular();
  }
  return $result;
}

// simple retrieve from a preset list of nids

function lktaxonomy_all_nid(){
  print "<!-- ALL NID -->";
  $today = getdate();
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 12), $today['year']);
  $end_time = time();

  // 2828 is "growing up with litkicks" blog post
  $query = "select n.nid, n.vid, n.title, n.created
            from node n where n.nid = 2828
            order by n.created desc";
        //from node n where n.nid in (2293,2279, 2268,2267,2264,2261,2257,2254,2244,2250,2248)
        //from node n where n.nid in (1921,1927,1968,2113,2001,2013,2018,1570,2025,2041,2091)
        //from node n where n.nid in (1666,1290,1740,1770,1619,774,2095,1918,1778,2043,823,1533)
        //from node n where n.nid in (1794,2012,2049,1109,891,1393,1821,1956,1969,2085,2151,2031)
        //from node n where n.nid in (1102,1108,198,209,360,2179,2170,2063,640,1107,2163)
        //from node n where n.nid in (2138,2122,549,2063,2471,1663,2011,1942,1081,497,854)
        //from node n where n.nid in (1574, 2163, 1752, 2162, 2103, 2122, 2170, 2168, 2175, 1675, 2167)
        //from node n where n.nid in (2122, 1675, 1727, 2145, 2156, 2168, 2180, 2123)";
  $result = db_query($query);
  return $result;
}

// simple retrieve that gets nodes by date

function lktaxonomy_all_latest(){
  $today = getdate();
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 30), $today['year']);
  $end_time = time();

  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'vid', 'title', 'created'))
    ->condition('status', 1) //Published.
    ->condition('type', "story")
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC') //Most recent first.
    ->execute();
  return $query;
}

// variation on lktaxonomy_all_latest() that selects by popularity order
// from a longer interval of recent articles

function lktaxonomy_all_latest_popular(){
  $today = getdate();
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 90), $today['year']);
  $end_time = time();

  $query = "SELECT n.nid AS nid, n.vid AS vid, n.title AS title, n.created AS created
            FROM node n
            JOIN node_counter nc ON nc.nid = n.nid
            WHERE (status = '1') AND (type = 'story') AND (created BETWEEN '" . $start_time . "' AND '" . $end_time . "')
            ORDER BY nc.daycount DESC
            LIMIT 12 OFFSET 0";
  $result = db_query($query);
  return $result;

  //$query = db_select('{node}', 'n');
  //$query->join('{node_counter}','nc','nc.nid = n.nid');
  //$query->fields('n', array('nid', 'vid', 'title', 'created'))
  //  ->condition('status', 1) //Published.
  //  ->condition('type', "story")
  //  ->condition('created', array($start_time, $end_time), 'BETWEEN')
  //  ->orderBy('nc.daycount', 'DESC') //Most popular first.
  //  ->range(0,12)
  //  ->execute();
  //  dpq($query);
  //return $query;
}

function lktaxonomy_block_info() {
  $blocks['lktaxonomyside'] = array(
    'info' => t('Taxonomy Selection Side'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE, //Default
  );
  $blocks['lktaxonomybottom'] = array(
    'info' => t('Taxonomy Selection Bottom'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE, //Default
  );
  return $blocks;
}

function lktaxonomy_help($path, $arg) {
  switch ($path) {
    case "admin/help#lktaxonomy":
      return '<p>' . t("Select related articles for a node based on all taxonomy terms") . '</p>';
      break;
  }
}

// get nid from path

function get_nid_from_alias($pathalias) {
  $nid = 0;
  $fullsource = null;
  $query = "select source from url_alias where alias = '" . $pathalias . "'";
  $result = db_query($query);
  foreach ($result as $aliasdata){
     $fullsource = $aliasdata->source;
  }
  if (!empty($fullsource)) {
     $nid = intval(str_replace("node/","",$fullsource));
  }
  print "<!-- GET NID FROM ALIAS: " . $nid . "-->";
  return $nid;
}

// add links at bottom of node if a series term is present

function lktaxonomy_series_links($nid) {
    global $user;
    $enable_series_links = true;
    $slinx = "";

    // use cached data if available
    $cid = "serieslinks:" . $nid;
    if ($cached = cache_get($cid,'cache')) {
       $slinx = $cached->data;
       return $slinx;
    }

    //
    // series vocabulary is hardcoded as 3
    //
    $seriesvid = 3;
    if ($enable_series_links) {
       $query1 = "SELECT td.tid, td.name FROM taxonomy_term_data td, taxonomy_index ti WHERE td.tid = ti.tid AND td.vid = " .
                 $seriesvid . " AND ti.nid = " . $nid;
       $result1 = db_query($query1);
       $seriestid = 0;
       foreach ($result1 as $thisterm) {
          $seriestid = $thisterm->tid;
          $seriesname = $thisterm->name;
          //
          // a few more hard-coded taxonomy values
          //
          $memoirtid = 89;
          $pricingtid = 92;
          $prousttid = 95;
          $bardotid = 100;
          if ($seriestid==$memoirtid) {
             $seriespath = "http://www.litkicks.com/AMemoirInProgress";
          } else if ($seriestid==$pricingtid) {
             $seriespath = "http://www.litkicks.com/BookPricingIndex";
          } else if ($seriestid==$prousttid) {
             $seriespath = "http://www.litkicks.com/BeyondTheMadeleines";
          } else if ($seriestid==$bardotid) {
             $seriespath = "http://www.litkicks.com/SlicedBardo";
          } else {
             $seriespath = "http://www.litkicks.com/" . drupal_get_path_alias("taxonomy/term/$seriestid");
          }
          $serieslink = "<a href=\"" . $seriespath . "\">" . $seriesname . "</a>";
       }
       if ($seriestid > 0) {
          $query2 = "SELECT n.nid, n.title FROM node n, taxonomy_index ti, node n2 WHERE n.nid = ti.nid AND ti.tid = " .
                    $seriestid . " AND n.created > n2.created AND n.status = 1 AND n2.nid = " . $nid . " ORDER BY n.created LIMIT 1";
          $result2 = db_query($query2);
          $nextnid = 0;
          foreach ($result2 as $nextdata) {
             $nextnid = $nextdata->nid;
             $nexttitle = $nextdata->title;
             $thispathalias = "http://www.litkicks.com/" . drupal_get_path_alias("node/$nextnid");
             $nextlink = l($nexttitle,$thispathalias);
             $slinx .= "The next post in the series is <b>" . $nextlink . "</b>. ";
          }
          $query3 = "SELECT n.nid, n.title FROM node n, taxonomy_index ti, node n2 WHERE n.nid = ti.nid AND ti.tid = " .
                    $seriestid . " AND n.created < n2.created AND n.status = 1 AND n2.nid = " . $nid . " ORDER BY n.created DESC LIMIT 1";
          $result3 = db_query($query3);
          $prevnid = 0;
          foreach ($result3 as $prevdata) {
             $prevnid = $prevdata->nid;
             $prevtitle = $prevdata->title;
             $thispathalias = "http://www.litkicks.com/" . drupal_get_path_alias("node/$prevnid");
             $prevlink = l($prevtitle,$thispathalias);
             $slinx .= "The previous post in the series is <b>" . $prevlink . "</b>.";
          }
          $slinx .= "</i>";
       }
    }
    // write data to cache

    if ($user->uid==0) {
        $expire = time() + (60 * 360); // cache for six hours
        cache_set($cid, $slinx, 'cache', $expire);
    }
    return($slinx);
}
